##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
#server {
	#listen 80 default_server;
	#listen [::]:80 default_server; 
	##return 301 https://13.126.187.150$request_uri;	
	##}
	
##server {
	#listen 443 ssl http2 default_server;
	#listen [::]:443 ssl http2 default_server;

	#server_name Mayank;
	##include snippets/self-signed.conf;
	##include snippets/ssl-params.conf;
	#root /home/ubuntu/;
	#location /ecell {
		 #autoindex on;	
		 #autoindex_exact_size off;
	#}
	#location /regportal/ {
		#index index.html;
		##try_files $uri$args $uri$args/ /index.html;
		#try_files $uri $uri/ /index.html;
	#}
	#location /foo/ {
		#alias /home/ubuntu/regportal/;
		##try_files $uri$args $uri$args/ /index.html;
		#try_files $uri$args $uri$args/ /index.html =404;
	#}
	#location /caportal/ {
		 #autoindex on;	
		 #autoindex_exact_size off;
	#}
	#location /assets/ {
		#alias /home/ubuntu/regportal/assets/;
	#}
	##location /regportal/ {
				##proxy_pass http://localhost:4200/;
				##proxy_http_version 1.1;
				##proxy_set_header Upgrade $http_upgrade;
				##proxy_set_header Connection 'upgrade';
				##proxy_set_header Host $host;
				##proxy_cache_bypass $http_upgrade;
		##}
	#location /esbackend/ {
        #proxy_pass http://localhost:8080/;
        #proxy_http_version 1.1;
        #proxy_set_header Upgrade $http_upgrade;
        #proxy_set_header Connection 'upgrade';
        #proxy_set_header Host $host;
        #proxy_cache_bypass $http_upgrade;
    #}
	#location /api/ {
			#rewrite /foo/(.*) /$1 break;
        #proxy_pass http://localhost:9000/;
        #proxy_http_version 1.1;
        #proxy_set_header Upgrade $http_upgrade;
        #proxy_set_header Connection 'upgrade';
        #proxy_set_header Host $host;
        #proxy_cache_bypass $http_upgrade;
    #}
#location /gui {
              #proxy_pass http://localhost:7000/gui;
              #proxy_set_header Host $http_host;
              #proxy_set_header X-Real-IP $remote_addr;
              #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              #proxy_set_header X-Forwarded-Proto $scheme;
        #}
##location ~ \.php$ {
            ##include snippets/fastcgi-php.conf;
            ##fastcgi_pass unix:/run/php/php7.0-fpm.sock;      
    ##}
		##include snippets/fastcgi-php.conf;
		##fastcgi_index index.php;
	####
	####	# With php7.0-cgi alone:
	####	fastcgi_pass 127.0.0.1:9000;
	####	# With php7.0-fpm:
		##fastcgi_pass unix:/run/php/php7.0-fpm.sock;


## SSL configuration
	##
	## listen 443 ssl default_server;
	## listen [::]:443 ssl default_server;
	##
	## Note: You should disable gzip for SSL traffic.
	## See: https://bugs.debian.org/773332
	##
	## Read up on ssl_ciphers to ensure a secure configuration.
	## See: https://bugs.debian.org/765782
	##
	## Self signed certs generated by the ssl-cert package
	## Don't use them in a production server!
	##
	## include snippets/snakeoil.conf;


	## Add index.php to the list if you are using PHP
		##root /home/ubuntu/serve;
	##location / {
		###autoindex on;
		### First attempt to serve request as file, then
		### as directory, then fall back to displaying a 404.
		###root /home/ubuntu/serve;
		##index index.html index.htm index.nginx-debian.html;
		###try_files $uri $uri/ =404;
	##}
	###location /{
		###autoindex on;
	###}

	### pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	###
	###location ~ \.php$ {
	###	include snippets/fastcgi-php.conf;
	###
	###	# With php7.0-cgi alone:
	###	fastcgi_pass 127.0.0.1:9000;
	###	# With php7.0-fpm:
	###	fastcgi_pass unix:/run/php/php7.0-fpm.sock;
	###}

	### deny access to .htaccess files, if Apache's document root
	### concurs with nginx's one
	###
	###location ~ /\.ht {
	###	deny all;
	###}
#}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

server { 
	#return 301 https://13.126.187.150$request_uri;	
	#}
	
#server {
	listen 443 ssl http2 ;
	listen [::]:443 ssl http2 ;
    server_name msharma.me; # managed by Certbot
	#include snippets/self-signed.conf;
	#include snippets/ssl-params.conf;
	root /home/ubuntu/;
	location /ecell {
	 	autoindex on;	
	 	autoindex_exact_size off;
	}
	location /assets/ {
		alias /home/ubuntu/regportal/assets/;
	}
	location /api/ {
			rewrite /foo/(.*) /$1 break;
        proxy_pass http://localhost:9000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
location /gui {
              proxy_pass http://localhost:7000/gui;
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
        }
#location ~ \.php$ {
            #include snippets/fastcgi-php.conf;
            #fastcgi_pass unix:/run/php/php7.0-fpm.sock;      
    #}
		#include snippets/fastcgi-php.conf;
		#fastcgi_index index.php;
	###
	###	# With php7.0-cgi alone:
	###	fastcgi_pass 127.0.0.1:9000;
	###	# With php7.0-fpm:
		#fastcgi_pass unix:/run/php/php7.0-fpm.sock;


# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

    ssl_certificate /etc/letsencrypt/live/msharma.me/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/msharma.me/privkey.pem; # managed by Certbot
}
server {
    if ($host = msharma.me) {
        return 301 https://msharma.me$request_uri;
    } # managed by Certbot


	listen 80 ;
	listen [::]:80 ;
    server_name msharma.me;
    return 404; # managed by Certbot


}

